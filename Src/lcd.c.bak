#include "lcd.h"

HAL_StatusTypeDef LCD_SendInternal(uint8_t lcd_addr, uint8_t data, uint8_t flags) {
    HAL_StatusTypeDef res;
    for(;;){
        res = HAL_I2C_IsDeviceReady(&I2C_HANDLER, lcd_addr, 1, HAL_MAX_DELAY);
        if (res == HAL_OK)
            break;
    }

    uint8_t upper = data & 0xF0;
    uint8_t lower = (data << 4) & 0xF0;

    uint8_t data_arr[4];
    data_arr[0] = upper | flags | BACKLIGHT | PIN_EN;   // xxxx 1100
    data_arr[1] = upper | flags | BACKLIGHT;            // xxxx 1000
    data_arr[2] = lower | flags | BACKLIGHT | PIN_EN;   // xxxx 1100
    data_arr[3] = lower | flags | BACKLIGHT;            // xxxx 1000

    res = HAL_I2C_Master_Transmit(&I2C_HANDLER, lcd_addr, data_arr, sizeof(data_arr), HAL_MAX_DELAY);
    HAL_Delay(LCD_DELAY_MS);
    return res;
};

void LCD_SendCommand(uint8_t lcd_addr, uint8_t cmd) {
    LCD_SendInternal(lcd_addr, cmd, 0);
};

void LCD_SendData(uint8_t lcd_addr, uint8_t data) {
    LCD_SendInternal(lcd_addr, data, PIN_RS);
};

void LCD_SendString(uint8_t lcd_addr, char *str) {
    while(*str) {
        LCD_SendData(lcd_addr, (uint8_t)(*str));
        str++;
    }
};

void LCD_Init(uint8_t lcd_addr) {
    HAL_Delay(100);
    LCD_SendCommand(lcd_addr, 0x33); // set 8 bit
    HAL_Delay(100);
    LCD_SendCommand(lcd_addr, 0x22); // set 8 bit
    HAL_Delay(100);
    // 4-bit mode, 2 lines, 5x8 format
    LCD_SendCommand(lcd_addr, 0x80);
    HAL_Delay(100);
    LCD_SendCommand(lcd_addr, 0x80);
    HAL_Delay(100);
    // display & cursor return to home
    LCD_SendCommand(lcd_addr, 0x10);
    HAL_Delay(100);
    // display on, cursor off, blink off
    LCD_SendCommand(lcd_addr, 0x60);
    HAL_Delay(100);
    // clear display
    LCD_SendCommand(lcd_addr, 0xc0);
    HAL_Delay(100);
}
